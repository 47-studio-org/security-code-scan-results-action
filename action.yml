name: 'SecurityCodeScan'
description: 'Security Code Scan action to upload code scanning results'
branding:
  icon: 'check-circle'
  color: 'purple'
inputs:
  sarif_directory:
    description: The output directory where SARIF files should be collected.
    required: false
    default: '../results'
runs:
  using: "composite"
  steps:
    - name: Convert sarif
      shell: bash
      run: |
        dotnet tool install --global Sarif.Multitool --version 2.3.10
        outputDir="${{ inputs.sarif_directory }}"
        mkdir $outputDir

        i=0
        for sarifFile in $(find ./ -name '*.sarif')
        do
          sarif transform $sarifFile --output $sarifFile -f --sarif-output-version Current
          sarif query $sarifFile --expression "RuleId |> SCS" -p -f -o $sarifFile
          jq 'del(.runs[].tool.driver.rules[] | select(.id | startswith("SCS") | not))' $sarifFile > $sarifFile.tmp
          mv $sarifFile.tmp $sarifFile
          jq 'del(.runs[].results[].ruleIndex)' $sarifFile > $sarifFile.tmp
          mv $sarifFile.tmp $sarifFile
          jq '.runs[].tool.driver.name = "SecurityCodeScan"' $sarifFile > $sarifFile.tmp
          mv $sarifFile.tmp $sarifFile
          jq '.runs[].tool.driver.fullName = "Vulnerability Patterns Detector for C# and VB.NET"' $sarifFile > $sarifFile.tmp
          mv $sarifFile.tmp $sarifFile
          jq '.runs[].tool.driver.informationUri = "https://security-code-scan.github.io"' $sarifFile > $sarifFile.tmp
          mv $sarifFile.tmp $sarifFile
          jq 'del(.runs[].tool.driver.rules[].shortDescription)' $sarifFile > $sarifFile.tmp
          mv $sarifFile.tmp $sarifFile
          jq 'del(.runs[].language)' $sarifFile > $sarifFile.tmp
          mv $sarifFile.tmp $sarifFile
          jq '
            def walk(f):
              . as $in
              | if type == "object" then
                reduce keys[] as $key
                  ( {}; . + { ($key):  ($in[$key] | walk(f)) } ) | f
              elif type == "array" then map( walk(f) ) | f
              else f
              end;
          walk( if type == "object" and has("helpUri")
                then .help.text += .helpUri
                else .
                end)
          ' $sarifFile > $sarifFile.tmp
          mv $sarifFile.tmp $sarifFile
          mv $sarifFile $outputDir/$((i++)).sarif
        done
